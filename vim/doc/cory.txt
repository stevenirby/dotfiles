*cory.txt*    A compilation of all of cory's vim utilities

Author: Cory Dodt (cory AT decipherinc DOT com)
For Vim version 7.0 and above
Last change: 2009 Jan 13

1. Overview                    |cory-intro|
2. Features                    |cory-features|
3. Commands                    |cory-commands|
4. Mappings                    |cory-mappings|
5. Overriding Settings         |cory-override|

==============================================================================
                                            *cory-intro*
1. Overview~

This is a collection of the vim configuration Cory has worked on for many
years.  It contains a number of utilities, keyboard mappings, color schemes,
syntax highlights, and other niceties that Cory can't live without.  He hopes
you will like it as well.

==============================================================================
                                            *cory-features*
2. Features~

    * Lots of commands added |cory-commands|

    * Keyboard mappings for most of the commands |cory-mappings|

    * Add a useful |modeline|

    * Automatically change directories to be near the file you are editing.

    * For using ReST or just typing nice text files, underline headers.  Use
      \\= to over-and-underline (use only for titles), or use \=, \- and \` to
      underline different levels of header.

    * Simplified ReST table creation.  Select several lines of text that are
      already tabular and use a mapping to instantly format it into the table
      format used by ReST. |cory-table-bordering|

    * Includes these plugins:
        * |cory-yankring.txt| emacs-like ring buffer.  After pasting, press control+P to
          cycle through any old deletion and bring it back.

        * |cory-taglist.txt| make use of ctags to see all tags in the file you're
          editing.  Press \T to toggle it.

        * |cory-table.txt| make it easier to edit tables.  Type in the header line of a
          table, properly spaced.  Then press: \\th to set those columns as
          your table columns.  From that point <TAB> will move you from
          virtual "cell" to cell, making it easier to type out all the data in
          the table.  Press \\tt to toggle it off.

        * |cory-matchit.txt| Provides expanded functionality for the |%| key.  Put
          your cursor on an opening XML <tag>, press %, and it will jump to the
          closing </tag>

    * Includes syntax highlighting for a number of extra languages such as N3,
      EBNF, and Hermes V2 styles files.  Also a highlighter for log files
      containing Python tracebacks, and enhanced highlighting for Javascript.

    * Enhanced folding for a number of formats including Javascript, Python,
      and unified diffs. 

    * Set all options suitable for Python editing: tabs as spaces |'sts'|, correct
      indentations |'ts'| |'sw'|, and so on

    * Turn on lots of reasonable defaults: |'visualbell'|, |'number'|,
      |'virtualedit'|=block, and others.

    * Allow |:make| to run jslint on javascript files.  (XXX TODO - jslint.js
      and support files not included and should be.)  Use \] and \[ to jump
      backwards and forwards through error lists.  (This also works with e.g.
      |:helpgrep|)

    * Command to run pyflakes on a file and cycle through error lists using
      the quickfix list (\] and \[ to jump through the list)

==============================================================================
                                            *cory-commands*
3. Commands~

Version control helpers~

                                            *:HgDiff*
:HgDiff
    Will perform 'hg diff' on the file you're currently editing, and show the
    results in a new window pane.
                                            *:HgDiff2*
:HgDiff2
    (experimental) Will perform 'hg diff' on the file you're currently editing, and show the
    results as a side-by-side vimdiff.
                                            *:SvnDiff*
:SvnDiff
    Same, for Subversion

Run pyflakes~

                                            *:PyFlake*
:PyFlake
    Runs pyflakes on the current buffer, which should be a Python file.  Uses
    the quickfix list so you can jump through the list of errors straight to
    the line where the error occurred.


Copy the current file's absolute path~
                                            *:Abspath*
:Abspath            
    Copy the current file's absolute path to the system
    clipboard so you can paste it into another application

Jump to Python symbols quickly~

Utilities for jumping straight to the system definition of a qualified Python
name.  These utilities require that you have the Python script 'pp' installed
into your system path.
                                            *:Pp*
:Pp {name}
    In the current buffer, look for {name} as a Python symbol, and jump to the
    file it's defined in.  e.g.: :Pp twisted.web will jump to
    /usr/lib/python2.5/site-packages/twisted/web/__init__.py
                                            *:Ppn*
:Ppn {name}
    Same as :Pp, in a new horizontal window.
                                            *:Ppv*
:Ppv {name}
    Same as :Pp, in a new vertical window.

Pretty up XML~
                                            *:PrettyXML*
:PrettyXML  
    Error checks and automatically tidies up XML.  If there are no errors, the
    tidying up happens in the current buffer.  If there are errors, uses the
    quickfix list to jump to the errors.
    
    This requires that 'xmllint' be installed, which is usually found in the
    'libxml2-utils' package.

                                            *:PrettyHTML*
:PrettyHTML  
    Like PrettyXML but less strict, works on HTML files.

Run a buffer as a interpreted script~

These will use an interpreter to run the contents of the current buffer, and
then display the output below.

                                            *:RunPyBuffer*
:RunPyBuffer
    Run the current buffer through 'python -' as a shell script
                                            *:RunBashBuffer*
:RunBashBuffer
    Run the current buffer through 'bash -' as a shell script
                                            *:RunSQLiteBuffer*
:RunSQLiteBuffer
    Run the current buffer as a sqlite3 script and show output.  Recommend you
    set up a ~/.sqliterc before using this.  You can attach to databases by
    using the 'attach' SQL syntax:

    attach '/path/to/mydb.db' as 'mydb';

    Just add that to the top of your buffer with the correct path/name.

==============================================================================
                                            *cory-mappings*
3. Mappings~

This is a summary of all mappings this config defines.  |<Leader>| means
backslash (\) in default vim configurations, but you can change it to be something
else.  All of these are actually mapped to <Leader>, but I'll list them using
backslash for clarity's sake.

\c
    In gvim, copy to the clipboard (like ^C in other applications)
\v
    In gvim, paste from the clipboard (like ^V in other applications)
\x
    In gvim, cut to the clipboard (like ^X in other applications)
\D
    Toggle :HgDiff2 mode on or off
\V
    Reload your .vimrc

Using script interpreters~
\p
    :RunPyBuffer - run the current buffer as a python script and
    show output
\b
    :RunBashBuffer - run the current buffer as a bash script and
    show output
\q
    :RunSQLiteBuffer - run the current buffer as a sqlite3 script and show
    output.  See |:RunSQLiteBuffer| for tips.

Using the quickfix list~
\]
    Jump to the next error when using |:make| or |:helpgrep|
\[
    Jump to the previous error when using |:make| or |:helpgrep|

Underlining headings and titles~
\\=
    Underline a title, above and below
\-
    Underline a heading with ----
\=
    Underline a heading with ====
\`
    Underline a heading with tildes
  
                                            *cory-table-bordering*
Table bordering~
{Visual}\!
    For the selected lines, apply table borders above the first line, below
    the last line, and below the header row, in the style recognized by
    RestructuredText (but it also just looks nice).  Helps if the table has
    already been formatted with the |table.vim| mappings, e.g. \\th then \\ta.

Tabs~
\t
    Open a new blank tab
\<CTRL-T>
    Unconditionally close the current tab, regardless of changes

Actually part of yankring, but useful~
                                        *cory-yankring.txt*
<C-P>
    Cycle through the kill/yank ring, looking for the deleted text you want
    back.  For example, if you delete two items, then paste with |p|, then
    press <C-P> once
<C-N>
    Like <C-P> but forwards instead of backwards.

Actually part of matchit, but useful~
                                        *cory-matchit.txt*
%
    In addition to the usual paren-, bracket-, and brace-matching behavior,
    jump to the matching xml tag in an xml document.

Actually part of table, but useful~
                                        *cory-table.txt*
\\th
    Parse the current line for where columns start, and make <Tab> take you
    between columns like a spreadsheet program
\\tt
    Toggle off <Tab>'s spreadsheet-like behavior
\\ta
    For a bunch of selected lines, try to reformat every line to be in table
    columns.  Works best on ASCII text and works best if you use at least two
    spaces between each column.  You must use \\th first to set the row that
    the other rows will be formatted to match.

Actually part of taglist, but useful~
                                        *cory-taglist.txt*
\T
    Turn on or off the taglist pane on the left

==============================================================================
                                        *cory-abbreviations*
4. Abbreviations~

Abbreviations in vim are what you might call "snippets" in other editors.
Cory's Vimtoys has several of these defined.

Quickly insert boilerplate files~

These are implemented as abbreviations.  To use, in edit mode, TYPE THE
ABBREVIATION and press space, OR ctrl+space (if you don't actually want a
space at the end).

All of these abbreviations end with 'bp' (for "boilerplate").

                                            *htmlbp*
Type 'htmlbp' to write a blank HTML file into the current buffer, complete with
doctype, script and style tags.

                                            *surveybp*
Type 'surveybp' to get a blank survey.xml file in the current buffer.

                                            *unittestbp*
Type 'unittestbp' to get a complete pyunit-style unit test file in the current
buffer.

                                            *pluginbp*
Type 'pluginbp' to write a boilerplate plugin application (using
hermes.plugapps API) into the current buffer.

                                            *usagebp*
Type 'usagebp' to write a boilerplate Python command-line script into the
current buffer.  It uses twisted.python.usage as a basis and has most of the
classes and main function set up for you. 


==============================================================================
                                        *cory-override*
5. Overriding settings~

This script makes some choices for you regarding indentation, syntax
highlighting, color scheme and so on.  You can override any of these, but you
must tell vimtoys that you want to override these settings.  To do so, use
'let' to create a list variable in your .vimrc:

    let g:vtoverride = ["indent", "colorscheme"]

This would allow you to override any settings in the 'indent' and
'colorscheme' sections of the vimtoys default config.

Here are the settings, grouped by the g:vtoverride variable that is required
to override them.

Just include one of these in g:vtoverride, and then set it to whatever you
want.

"indent"
        textwidth, shiftwidth, tabstop, shifttabstop, expandtab

"cursor"
        virtualedit, backspace, whichwrap

"temp"
        nobackup, nowritebackup, directory

"syntax"
        filetype plugin on, syn on

"appearance"
        visualbell, nohlsearch, number, guitablabel

"colorscheme"
        colorscheme

"status"
        laststatus, statusline

"misc"
        tags, modeline, g:yankring_history_file

==============================================================================
vim:tw=78:ts=4:et:ft=help:si:
